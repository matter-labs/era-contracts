import { expect } from "chai";
import type { Contract } from "zksync-web3";
import { callFallback, deployContractYul } from "./shared/utils";

describe("EcMul tests", function () {
  let ecMul: Contract;

  before(async () => {
    ecMul = await deployContractYul("EcMul", "precompiles");
  });

  describe("Ethereum tests", function () {
    it("128 bytes: (1, 3) * 0", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 2) * 21888242871839275222246405745257275088548364400416034343698204186575808495616", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000230644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x000000000000000000000000000000000000000000000000000000000000000130644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45"
      );
    });

    it("64 bytes: (1, 3) * 0", async () => {
      const call = callFallback(
        ecMul,
        "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495616", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("96 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495617", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"
      );
      await expect(call).to.be.reverted;
    });

    it("96 bytes: (1, 3) * 1", async () => {
      const call = callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001"
      );
      await expect(call).to.be.reverted;
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 21888242871839275222246405745257275088548364400416034343698204186575808495616
    it("96 bytes: (1199..7827, 1184..6598) * 2188..5616", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f630644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000"
      );
      await expect(returnData).to.be.equal(
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe3163511ddc1c3f25d396745388200081287b3fd1472d8339d5fecb2eae0830451"
      );
    });

    it("128 bytes: (1, 3) * 9", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495617", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 2) * 340282366920938463463374607431768211456", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000100000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x13b8fec4a1eb2c7e3ccc07061ad516277c3bbe57bd4a302012b58a517f6437a4224d978b5763831dff16ce9b2c42222684835fedfc70ffec005789bb0c10de36"
      );
    });

    it("96 bytes: (1, 3) * 2", async () => {
      const call = callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 3) * 1", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("96 bytes: (1, 2) * 115792089237316195423570985008687907853269984665640564039457584007913129639935", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
      await expect(returnData).to.be.equal(
        "0x2f588cffe99db877a4434b598ab28f81e0522910ea52b45f0adaa772b2d5d35212f42fa8fd34fb1b33d8c6a718b6590198389b26fc9d8808d971f8b009777a97"
      );
    });

    it("128 bytes: (1, 2) * 21888242871839275222246405745257275088548364400416034343698204186575808495617", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000230644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });

    it("128 bytes: (1, 2) * 2", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd315ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 340282366920938463463374607431768211456
    it("80 bytes: (1199..7827, 1184..6598) * 340282366920938463463374607431768211456", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f60000000000000000000000000000000100000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x1051acb0700ec6d42a88215852d582efbaef31529b6fcbc3277b5c1b300f5cf0135b2394bb45ab04b8bd7611bd2dfe1de6a4e6e2ccea1ea1955f577cd66af85b"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 0
    it("96 bytes: (1199..7827, 1184..6598) * 0", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f60000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });

    it("96 bytes: (1, 3) * 9", async () => {
      const call = callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000009"
      );
      await expect(call).to.be.reverted;
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 115792089237316195423570985008687907853269984665640564039457584007913129639935
    it("96 bytes: (1, 3) * 9", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
      await expect(returnData).to.be.equal(
        "0x2cde5879ba6f13c0b5aa4ef627f159a3347df9722efce88a9afbb20b763b4c411aa7e43076f6aee272755a7f9b84832e71559ba0d2e0b17d5f9f01755e5b0d11"
      );
    });

    it("96 bytes: (1, 3) * 115792089237316195423570985008687907853269984665640564039457584007913129639935", async () => {
      const call = callFallback(
        ecMul,
        "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 0
    it("64 bytes: (1199..7827, 1184..6598) * 0", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f6"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });

    it("128 bytes: (1, 2) * 115792089237316195423570985008687907853269984665640564039457584007913129639935", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x2f588cffe99db877a4434b598ab28f81e0522910ea52b45f0adaa772b2d5d35212f42fa8fd34fb1b33d8c6a718b6590198389b26fc9d8808d971f8b009777a97"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 1
    it("96 bytes: (1199..7827, 1184..6598) * 1", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f60000000000000000000000000000000000000000000000000000000000000001"
      );
      await expect(returnData).to.be.equal(
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f6"
      );
    });

    it("96 bytes: (1, 2) * 9", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000009"
      );
      await expect(returnData).to.be.equal(
        "0x039730ea8dff1254c0fee9c0ea777d29a9c710b7e616683f194f18c43b43b869073a5ffcc6fc7a28c30723d6e58ce577356982d65b833a5a5c15bf9024b43d98"
      );
    });

    it("96 bytes: (1, 2) * 21888242871839275222246405745257275088548364400416034343698204186575808495617", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000230644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });

    it("80 bytes: (1, 3) * 340282366920938463463374607431768211456", async () => {
      const call = callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000100000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("80 bytes: (1, 3) * 2", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("96 bytes: (1, 3) * 21888242871839275222246405745257275088548364400416034343698204186575808495616", async () => {
      const call = callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000330644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000"
      );
      await expect(call).to.be.reverted;
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 2
    it("96 bytes: (1199..7827, 1184..6598) * 2", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f60000000000000000000000000000000000000000000000000000000000000002"
      );
      await expect(returnData).to.be.equal(
        "0x03d64e49ebb3c56c99e0769c1833879c9b86ead23945e1e7477cbd057e961c500d6840b39f8c2fefe0eced3e7d210b830f50831e756f1cc9039af65dc292e6d0"
      );
    });

    it("128 bytes: (1, 2) * 9", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x039730ea8dff1254c0fee9c0ea777d29a9c710b7e616683f194f18c43b43b869073a5ffcc6fc7a28c30723d6e58ce577356982d65b833a5a5c15bf9024b43d98"
      );
    });

    it("96 bytes: (1, 3) * 0", async () => {
      const call = callFallback(
        ecMul,
        "0x000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 21888242871839275222246405745257275088548364400416034343698204186575808495617
    it("96 bytes: (1199..7827, 1184..6598) * 2188..5617", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f630644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 9
    it("96 bytes: (1199..7827, 1184..6598) * 9", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f60000000000000000000000000000000000000000000000000000000000000009"
      );
      await expect(returnData).to.be.equal(
        "0x1dbad7d39dbc56379f78fac1bca147dc8e66de1b9d183c7b167351bfe0aeab742cd757d51289cd8dbd0acf9e673ad67d0f0a89f912af47ed1be53664f5692575"
      );
    });

    it("96 bytes: (1, 2) * 21888242871839275222246405745257275088548364400416034343698204186575808495616", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000230644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000000"
      );
      await expect(returnData).to.be.equal(
        "0x000000000000000000000000000000000000000000000000000000000000000130644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 2
    it("128 bytes: (1199..7827, 1184..6598) * 2", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x03d64e49ebb3c56c99e0769c1833879c9b86ead23945e1e7477cbd057e961c500d6840b39f8c2fefe0eced3e7d210b830f50831e756f1cc9039af65dc292e6d0"
      );
    });

    it("128 bytes: (1, 2) * 340282366920938463463374607431768211456", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x13b8fec4a1eb2c7e3ccc07061ad516277c3bbe57bd4a302012b58a517f6437a4224d978b5763831dff16ce9b2c42222684835fedfc70ffec005789bb0c10de36"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 115792089237316195423570985008687907853269984665640564039457584007913129639935
    it("128 bytes: (1199..7827, 1184..6598) * 1157..9935", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x2cde5879ba6f13c0b5aa4ef627f159a3347df9722efce88a9afbb20b763b4c411aa7e43076f6aee272755a7f9b84832e71559ba0d2e0b17d5f9f01755e5b0d11"
      );
    });

    // (11999875504842010600789954262886096740416429265635183817701593963271973497827, 11843594000332171325303933275547366297934113019079887694534126289021216356598)
    // *
    // 21888242871839275222246405745257275088548364400416034343698204186575808495617
    it("128 bytes: (1199..7827, 1184..6598) * 2188..5617", async () => {
      const returnData = await callFallback(
        ecMul,
        "0x1a87b0584ce92f4593d161480614f2989035225609f08058ccfa3d0f940febe31a2f3c951f6dadcc7ee9007dff81504b0fcd6d7cf59996efdc33d92bf7f9f8f630644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal(
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
    });
  });
});
