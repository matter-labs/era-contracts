// import * as hre from "hardhat";
import { expect } from "chai";
// import { Deployer } from "@matterlabs/hardhat-zksync-deploy";
import { ethers, network } from "hardhat";
import { defaultAbiCoder } from "ethers/lib/utils";
import type { Wallet } from "zksync-ethers";
// import * as zksyncV6 from "zksync-ethers-v6";
import * as zksync from "zksync-ethers";

import { serialize } from "zksync-ethers/build/utils";
import type { DefaultAccount } from "../typechain";
import { DefaultAccountFactory } from "../typechain";
import {
  TEST_BASE_TOKEN_SYSTEM_CONTRACT_ADDRESS,
  TEST_BOOTLOADER_FORMAL_ADDRESS,
  REAL_L2_INTEROP_HANDLER_ADDRESS,
  TEST_L2_ASSET_ROUTER_ADDRESS,
  INTEROP_BUNDLE_ABI,
  TEST_ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT_ADDRESS,
  REAL_L2_MESSAGE_VERIFICATION_ADDRESS,
  REAL_L2_INTEROP_ROOT_STORAGE_ADDRESS,
} from "./shared/constants";
import { signedTxToTransactionData } from "./shared/transactions";
import { deployContractOnAddress, getWallets } from "./shared/utils";
// import { ethers as ethersV5 } from "ethers";

// TODO: more test cases can be added.
describe("Interop tests", function () {
  let wallet: Wallet;
  let bootloaderAccount: ethers.Signer;

  let defaultAccount: DefaultAccount;
  let account: Wallet;
  const RANDOM_ADDRESS = ethers.utils.getAddress("0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef");

  before("Interop", async () => {
    wallet = getWallets()[0];
    account = getWallets()[2];
    await deployContractOnAddress(account.address, "DefaultAccount");
    defaultAccount = DefaultAccountFactory.connect(account.address, wallet);

    await deployContractOnAddress(TEST_ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT_ADDRESS, "AccountCodeStorage", false);

    await deployContractOnAddress(REAL_L2_INTEROP_HANDLER_ADDRESS, "DummyInteropHandler", false);

    await deployContractOnAddress(REAL_L2_MESSAGE_VERIFICATION_ADDRESS, "DummyL2MessageVerification", false);

    await deployContractOnAddress(REAL_L2_INTEROP_ROOT_STORAGE_ADDRESS, "L2InteropRootStorage", false);

    await deployContractOnAddress(TEST_BASE_TOKEN_SYSTEM_CONTRACT_ADDRESS, "L2BaseToken");
    // console.log("kl todo 6");
    await deployContractOnAddress(
      TEST_L2_ASSET_ROUTER_ADDRESS,
      "DummyL2AssetRouter",
      true,
      defaultAbiCoder.encode(
        ["uint256", "address", "address", "bytes32", "uint256"],
        [1, RANDOM_ADDRESS, RANDOM_ADDRESS, ethers.constants.HashZero, 1]
      )
    );

    bootloaderAccount = await ethers.getImpersonatedSigner(TEST_BOOTLOADER_FORMAL_ADDRESS);
  });

  it("successfully executed interop 1.5", async () => {
    // const hexTx =
    //   "";
    // const legacyTx = await account.populateTransaction({
    //   type: 0,
    //   to: REAL_L2_INTEROP_HANDLER_ADDRESS,
    //   from: account.address,
    //   nonce: await account.getNonce(),
    //   data: "0x",
    //   value: 0,
    //   gasLimit: 50000,
    // });
    // const txBytes = await account.signTransaction(legacyTx);
    // const parsedTx = await zksync.utils.parseTransaction(txBytes);
    // const parsedTx2 = await zksyncV6.utils.parseEip712(txBytes);
    // const hexTx = zksync.utils.serialize(interopTx);
    // await broadcastTransaction(hexTx, account.provider);
    // await (account.provider as any).broadcastTransaction(hexTx);
  });

  // function calculateInteropTxData() {
  //   const interopTxString = ["tuple(address to, address from, bytes data, uint256 value)"];

  //   const paymasterBundle = defaultAbiCoder.encode(interopTxString, [
  //     { to: RANDOM_ADDRESS, from: account.address, data: RANDOM_ADDRESS, value: 10000000000000000000n },
  //   ]);
  //   const l2AssetRouterString =
  //     "0x9c884fd100000000000000000000000000000000000000000000000000000000000001109c0d4add1b94fd348199e854b0efbc68c1ec865016908282cfa32b5c02a69606000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000001a36f9dbffc50cd7c7d5ccec1ce3232d1f08280b0000000000000000000000008da7cffaf1eab3bce2817d0c20ef5cd7ce82455a00000000000000000000000060d16f709e9179f961d5786f8d035e337990971f0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c
  //   const l2AssetRouterData = ethers.utils.arrayify(l2AssetRouterString);
  //   // console.log("kl todo l2AssetRouterData", l2AssetRouterData)
  //   // const call = defaultAbiCoder.encode(interopTxString, [
  //   //   { to: TEST_L2_ASSET_ROUTER_ADDRESS, from: TEST_L2_ASSET_ROUTER_ADDRESS, data: l2AssetRouterData, value: 0 },
  //   // ]);
  //   const executionBundle = defaultAbiCoder.encode(
  //     [INTEROP_BUNDLE_ABI],
  //     [
  //       {
  //         destinationChainId: 1,
  //         calls: [
  //           {
  //             to: TEST_L2_ASSET_ROUTER_ADDRESS,
  //             from: TEST_L2_ASSET_ROUTER_ADDRESS,
  //             data: l2AssetRouterData,
  //             value: 10000,
  //           },
  //         ],
  //         executionAddresses: [ethers.constants.AddressZero],
  //         cancellationAddress: ethers.constants.AddressZero,
  //       },
  //     ]
  //   );
  //   // console.log("kl todo executionBundle length", executionBundle.length)
  //   // console.log("kl todo executionBundle", executionBundle)
  //   interopTxData = defaultAbiCoder.encode(["bytes", "bytes"], [paymasterBundle, executionBundle]);
  //   // let [feeBytes, execBytes] = defaultAbiCoder.decode(["bytes", "bytes"], interopTxData)
  //   // console.log(feeBytes, execBytes)
  //   // const interopBundle = defaultAbiCoder.decode([INTEROP_BUNDLE_ABI], execBytes)
  //   // console.log(interopBundle)
  //   // console.log(interopBundle[0].executionAddresses)
  //   // console.log(interopBundle[0].calls)
  // }

  after(async function () {
    await network.provider.request({
      method: "hardhat_stopImpersonatingAccount",
      params: [TEST_BOOTLOADER_FORMAL_ADDRESS],
    });
  });

  //   it("successfully executed interop", async () => {
  //     const legacyTx = await account.populateTransaction({
  //       type: 0,
  //       to: TEST_L2_INTEROP_HANDLER_ADDRESS,
  //       from: account.address,
  //       nonce: 111,
  //       data: ethers.utils.arrayify(interopTxData),
  //       value: 0,
  //       gasLimit: 50000,
  //     });
  //     const txBytes = await account.signTransaction(legacyTx);
  //     const parsedTx = zksync.utils.parseTransaction(txBytes);
  //     const txData = signedTxToTransactionData(parsedTx)!;
  //     console.log(txData);

  //     const txHash = parsedTx.hash;
  //     delete legacyTx.from;
  //     const signedHash = ethers.utils.keccak256(serialize(legacyTx));

  //     await expect(await defaultAccount.connect(bootloaderAccount).executeTransaction(txHash, signedHash, txData));
  //     // .to.emit(TEST_L2_ASSET_ROUTER_ADDRESS, "Called")
  //     // .withArgs("0xdeadbeef");
  //   });

  it.skip("successfully executed interop 2", async () => {
    const data = ethers.arrayify(
      "0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000800a00000000000000000000000000000000000000000000000000000000000080010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000826bd95eac751efac2e72071688726559137f82a0000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001f900000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000ba00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000007200000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000800a000000000000000000000000000000000000000000000000000000000000800100000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000300000000000000000000000000000000000000000000000000000000000100030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003249c884fd1000000000000000000000000000000000000000000000000000000000000010fdf39940cb1a0afc5250040a5804f8ff7bc140ebf2e75f256e7c459012845b4a3000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000826bd95eac751efac2e72071688726559137f82a000000000000000000000000826bd95eac751efac2e72071688726559137f82a0000000000000000000000009a81a024873e01c4e337e044065016ac60eca97b000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c101000000000000000000000000000000000000000000000000000000000000010f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000007546f6b656ec3fa32a3cb219b21aff6d019573f953447ed5d8000000000000000000000000826bd95eac751efac2e72071688726559137f82a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000002a628cc3659a7c82a6c8ca1e9e933e1676cf3865000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000002a628cc3659a7c82a6c8ca1e9e933e1676cf3865000000000000000000000000826bd95eac751efac2e72071688726559137f82a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000002494b918de000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000009a81a024873e01c4e337e044065016ac60eca97b000000000000000000000000826bd95eac751efac2e72071688726559137f82a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000000000000000000000000000000000000001000400000000000000000000000000000000000000000000000002c68af0bb140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010002000000000000000000000000826bd95eac751efac2e72071688726559137f82a00000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000022424fd57fb0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000010f00000000000000000000000000000000000000000000000002c68af0bb14000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c9c3800000000000000000000000000000000000000000000000000000000000000320000000000000000000000000826bd95eac751efac2e72071688726559137f82a00000000000000000000000000000000000000000000000000000000000100030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a101ef75419b62712bace2de51cafa88b81ac028336312b659447726542afa5d8f0d00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000826bd95eac751efac2e72071688726559137f82a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
    );
    // console.log(data)
    const [feeBytes, execBytes] = defaultAbiCoder.decode(["bytes", "bytes"], data);
    // console.log(feeBytes, execBytes);
    const interopBundle = defaultAbiCoder.decode([INTEROP_BUNDLE_ABI], execBytes);
    const feeBundle = defaultAbiCoder.decode([INTEROP_BUNDLE_ABI], feeBytes);
    // console.log("exec bundle", interopBundle);
    // console.log("feeBundle", feeBundle);
    // console.log("exec address", interopBundle[0].executionAddresses)
    // console.log("exec calls", interopBundle[0].calls);
    // console.log("fee calls", feeBundle[0].calls);
    const reencoded = defaultAbiCoder.encode([INTEROP_BUNDLE_ABI], interopBundle);
    const reencodedFee = defaultAbiCoder.encode([INTEROP_BUNDLE_ABI], feeBundle);
    // console.log(reencoded);
    const reencodedComplete = defaultAbiCoder.encode(["bytes", "bytes"], [reencodedFee, reencoded]);
    // console.log("reencoded", reencodedComplete);
    // console.log("number of calls", interopBundle[0].calls.length);
    for (const call of interopBundle[0].calls) {
      // console.log(call.from);
      const from = BigInt(0x1111000000000000000000000000000000000000) + BigInt(call.from) + BigInt(0x1111);
      // console.log("0x" + from.toString(16));
      await deployContractOnAddress("0x" + from.toString(16), "DefaultAccount");
    }

    const legacyTx = await account.populateTransaction({
      type: 0,
      to: REAL_L2_INTEROP_HANDLER_ADDRESS,
      from: account.address,
      nonce: await account.getNonce(),
      data: reencodedComplete,
      value: 0,
      gasLimit: 50000,
    });

    const txBytes = await account.signTransaction(legacyTx);
    const parsedTx = zksync.utils.parseTransaction(txBytes);
    const txData = signedTxToTransactionData(parsedTx)!;

    const txHash = parsedTx.hash;
    delete legacyTx.from;
    const signedHash = ethers.keccak256(serialize(legacyTx));

    await expect(await defaultAccount.connect(bootloaderAccount).executeTransaction(txHash, signedHash, txData));
  });
});

// async function broadcastTransaction(signedTx: string, provider: zksync.Provider): Promise<ethers.TransactionResponse> {
//   const { blockNumber, hash } = await ethersV5.utils.resolveProperties({
//     blockNumber: provider.getBlockNumber(),
//     hash: _perform(
//       {
//         method: "broadcastTransaction",
//         signedTransaction: signedTx,
//       },
//       provider
//     ),
//     network: provider.getNetwork(),
//   });

//   const tx = ethers.Transaction.from(signedTx);
//   if (tx.hash !== hash) {
//     throw new Error("@TODO: the returned hash did not match!");
//   }

//   // eslint-disable-next-line @typescript-eslint/no-explicit-any
//   return this._wrapTransactionResponse(<any>tx).replaceableTransaction(blockNumber);
// }

// eslint-disable-next-line @typescript-eslint/no-explicit-any
// async function _perform(req: ethers.PerformActionRequest, provider: zksync.Provider): Promise<any> {
//   // Legacy networks do not like the type field being passed along (which
//   // is fair), so we delete type if it is 0 and a non-EIP-1559 network
//   if (req.method === "call" || req.method === "estimateGas") {
//     const tx = req.transaction;
//     if (tx && tx.type != null && ethers.getBigInt(tx.type)) {
//       // If there are no EIP-1559 or newer properties, it might be pre-EIP-1559
//       if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
//         const feeData = await provider.getFeeData();
//         if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
//           // Network doesn't know about EIP-1559 (and hence type)
//           req = Object.assign({}, req, {
//             transaction: Object.assign({}, tx, { type: undefined }),
//           });
//         }
//       }
//     }
//   }

//   const request = {
//     method: "eth_sendRawTransaction",
//     args: [req.signedTransaction],
//   };

//   if (request != null) {
//     return await provider.send(request.method, request.args);
//   }

//   // return provider._perform(req);
// }
