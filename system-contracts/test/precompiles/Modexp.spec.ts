import { expect } from "chai";
import type { Contract } from "zksync-ethers";
import { callFallback, deployContractYul } from "../shared/utils";

describe("Modexp tests", function () {
  let modexp: Contract;

  before(async () => {
    modexp = await deployContractYul("Modexp", "precompiles");
  });

  describe("Ethereum modexp tests", function () {
    it("0 bytes: (0, 0, 0)", async () => {
      const returnData = await callFallback(modexp, "");
      await expect(returnData).to.be.equal("0x");
    });

    it("128 bytes: (6, 9, 2)", async () => {
      const call = callFallback(
        modexp,
        "0x000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(call).to.be.reverted;
    });

    it("128 bytes: (1, 2, 0)", async () => {
      const returnData = await callFallback(
        modexp,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal("0x0000000000000000000000000000000000000000000000000000000000000000");
    });

    it("64 bytes: (0, 0, 0)", async () => {
      const returnData = await callFallback(
        modexp,
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal("0x0000000000000000000000000000000000000000000000000000000000000000");
    });

    it("128 bytes: (1, 2, 1)", async () => {
      const returnData = await callFallback(
        modexp,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal("0x0000000000000000000000000000000000000000000000000000000000000001");
    });

    it("192 bytes: (1, 2, 2)", async () => {
      const returnData = await callFallback(
        modexp,
        "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000"
      );
      await expect(returnData).to.be.equal("0x0000000000000000000000000000000000000000000000000000000000000000");
    });

    it("192 bytes: (1074..1145, 8486..3932, 1624..2969)", async () => {
      const returnData = await callFallback(
        modexp,
        "0x17c139df0efee0f766bc0204762b774362e4ded88953a39ce849a8a7fa163fa901e0559bacb160664764a357af8a9fe70baa9258e0b959273ffc5718c6d4cc7c039730ea8dff1254c0fee9c0ea777d29a9c710b7e616683f194f18c43b43b869073a5ffcc6fc7a28c30723d6e58ce577356982d65b833a5a5c15bf9024b43d98"
      );
      await expect(returnData).to.be.equal("0x0000000000000000000000000000000000000000000000000000000000000000");
    });
  });
});
